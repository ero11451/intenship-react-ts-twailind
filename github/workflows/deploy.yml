
name: Auto Deploy to Azure App Service

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
          cache: 'npm'

      - name: Install Dependencies
        run: |
          echo Installing dependencies...
          npm install || (echo ❌ Failed to install dependencies! && exit 1)

      - name: Build Project
        run: |
          npm install
          npm run build --if-present || (echo Building project...)
          npm run test --if-present || (echo ❌ Build failed! && exit 1)

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: testing_the_hosting_app
          package: .

   
