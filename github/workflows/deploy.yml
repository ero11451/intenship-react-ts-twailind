
name: Auto Deploy to Azure App Service

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          echo Installing dependencies...
          npm install || (echo ❌ Failed to install dependencies! && exit 1)

      - name: Build Project
        run: |
          echo Building project...
          npm run build || (echo ❌ Build failed! && exit 1)

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: my-azure-app
          package: .

      - name: Verify Deployment
        run: |
          URL=https://my-azure-app.azurewebsites.net
          echo 🔍 Checking if $URL is live...
          for i in {1..5}; do
            STATUS=$(curl -o /dev/null -s -w '%{http_code}' $URL)
            if [ $STATUS -eq 200 ]; then
              echo ✅ Deployment successful! App is live at $URL
              exit 0
            fi
            echo ⏳ Retrying in 10s... ($i/5)
            sleep 10
          done
          echo ❌ Deployment failed. App is not responding.
          exit 1
